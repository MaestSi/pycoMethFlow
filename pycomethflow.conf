/*
 * -------------------------------------------------
 *  MaestSi/pycoMethFlow Nextflow config file
 * -------------------------------------------------
 */
 
params {
    // Path to the tsv sample sheet file
    samples = "/path/to/samples.txt"
 
    // Path to a folder where to store results
    results_dir = "/path/to/results_dir"

    // Path to the fasta reference
    reference = "/path/to/file.fasta"

    // Path to a gff3 file
    gff = "/path/to/file.gff"
    
    // pycoMeth parameters
    CGI_Finder_m = 0
    CGI_Finder_w = 200
    CGI_Finder_c = 0.5
    CGI_Finder_r = 0.6
    CpG_Aggregate_d = 10
    CpG_Aggregate_l = 2
    Interval_Aggregate_n = 1000
    Interval_Aggregate_m = 5
    Interval_Aggregate_l = 2
    Meth_Comp_m = 0 
    Meth_Comp_l = 2
    Meth_Comp_pvalue_adj_method = "fdr_bh"
    Meth_Comp_pvalue_threshold = 0.01
    //Meth_Comp_only_tested_sites = "--only_tested_sites"
    Meth_Comp_only_tested_sites = ""
    Comp_Report_n = 100
    Comp_Report_d = 100000
    Comp_Report_pvalue_threshold = 0.01
    Comp_Report_min_diff_llr = 1
    Comp_Report_n_len_bin = 500
    Comp_Report_export_static_plots = ""
    //Comp_Report_export_static_plots = "--export_static_plots" 
    //Comp_Report_report_non_significant = "False"
    Comp_Report_report_non_significant = "--report_non_significant"

    
    help = false

    // Flags to select which process to run
    alignment = true
    nanopolish = true
    pycomethCGIFinder = true
    pycomethCpGAggregate = true
    pycomethIntervalAggregate = true
    pycomethMethComp = true
    pycomethCompReport = true
}

profiles {
	singularity {
	    singularity.enabled = true
	    singularity.autoMounts = false
	    //singularity.cacheDir = "/path/to/singularity/cacheDir" // if commented, work dir is going to be used
	    process {
	    cpus = 1
	    executor = 'pbspro' // set to 'local' if you are not using a queue management system
	    queue = 'workq'
	    perJobMemLimit = true
	    queueStatInterval = '1 ms'
	    pollInterval = '1 ms'
	    container = 'maestsi/pycomethflow:latest'
	    containerOptions = '--bind /home:/home' // adjust according to which directory you wish to make accessible to singularity

	    withName:alignment {
	    	cpus = { params.alignment ? 1 : 1 }
	    	memory = { params.alignment ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:nanopolish {
	    	cpus = { params.nanopolish ? 4 : 1 }
	    	memory = { params.nanopolish ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:pycomethCGIFinder {
	    	cpus = { params.pycomethCGIFinder ? 4 : 1 }
	    	memory = { params.pycomethCGIFinder ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:pycomethCpGAggregate {
	    	cpus = { params.pycomethCpGAggregate ? 4 : 1 }
	    	memory = { params.pycomethCpGAggregate ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:pycomethIntervalAggregate {
	    	cpus = { params.pycomethIntervalAggregate ? 4 : 1 }
	    	memory = { params.pycomethIntervalAggregate ? 20.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:pycomethMethComp{
	    	cpus = { params.pycomethMethComp ? 4 : 1 }
	    	memory = { params.pycomethMethComp ? 20.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:pycomethCompReport {
	    	cpus = { params.pycomethCompReport ? 4 : 1 }
	    	memory = { params.pycomethCompReport ? 20.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    }
    }
    docker {
	    docker.enabled = true
	    docker.autoMounts = false
	    //docker.cacheDir = "/path/to/docker/cacheDir" // if commented, work dir is going to be used
	    process {
	    cpus = 1
	    executor = 'local'
            container = 'maestsi/pycomethflow:latest'
	    containerOptions = '-v /home/:/home' // adjust according to which directory you wish to make accessible to docker
	    withName:alignment {
	    	cpus = { params.alignment ? 4 : 1 }
	    	memory = { params.alignment ? 4.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:nanopolish {
	    	cpus = { params.nanopolish ? 4 : 1 }
	    	memory = { params.nanopolish ? 4.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:pycomethCGIFinder {
	    	cpus = { params.pycomethCGIFinder ? 4 : 1 }
	    	memory = { params.pycomethCGIFinder ? 4.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:pycomethCpGAggregate {
	    	cpus = { params.pycomethCpGAggregate ? 4 : 1 }
	    	memory = { params.pycomethCpGAggregate ? 4.GB + (2.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:pycomethIntervalAggregate {
	    	cpus = { params.pycomethIntervalAggregate ? 4 : 1 }
	    	memory = { params.pycomethIntervalAggregate ? 4.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:pycomethMethComp{
	    	cpus = { params.pycomethMethComp ? 4 : 1 }
	    	memory = { params.pycomethMethComp ? 4.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:pycomethCompReport {
	    	cpus = { params.pycomethCompReport ? 4 : 1 }
	    	memory = { params.pycomethCompReport ? 4.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
        }
    }    
}

tower {
	enabled = false
	endpoint = '-'
	accessToken = 'insert access token'
}
